4-Jan-2022
==========
ReactJS: 
1)ReactJS is a free, open source JS library, to develop 
    web UserInterfaces (UI)
2)By using ReactJS we can develop rich GUI components
    These components can be reusable.
3)These componenets can be reusable in AngularJS, Angular, 
    ReactJS, Vie JS based applications also.
4)By using ReactJS we can develop Single Page Application(SPA) and as well as 
    traditional application or Multipage application.
5)It developed by Facebook.
6)Its first version is released in 
7)Its currenct version is 17
8)its official web site is : reactjs.org   
9)ReactJS internally uses JS + JSX
    jsx: java script extension 
    It is combination of JS + html.
10)Mostly by using ReactJS we are going to develop web components. 
11)component is nothing a custom HTML tag.  
    or 
    components can be reusable like a html tag.
12)some online sites to develop reactjs app: 
    1)https://stackblitz.com/
    2)https://codesandbox.io/
13)very important modules/libraries in ReactJS are: 
    1)React (react)        
    2)ReactDOM (react-dom)
    3)react-scripts 
14)The biggest advantage of ReactJS is 
    virtual DOM.
15)ReactJS based applications are fast comparitive 
    other technoloegies or frameworks  like Angular.   
16)Some other features of ReactJS are: 
        The main purpose of React is to be fast, 
        scalable, and simple.          


ReatJS Setup/Installation 
=========================
we have various aproaches to install ReactJS. 
To install ReactJS or to Create ReactJS project, 
We must install NodeJS.
nodejs.org 

version checking: 
node --version
or 
node -v

npm --version
or 
npm -v

npx --version
npm -v


Create ReactJS Project: 
=======================
npx create-react-app <project_name>
Ex: 
npx create-react-app firstex

https://github.com/facebook/create-react-app
https://create-react-app.dev/docs/getting-started/

Execute / Run application :
=========================
go inside of project folder at CMD, 
npm start 

By default react js project runs on port 3000

http://localhost:3000
http://localhost:3000/

ReactJS Project folder Structure: 
=================================
1)node_modules: 
    This folder contains installed libraries, 
    which ever supports ReactJS project..
2)public:
    public folder mainly contains index.html, 
    Application starts from this index.html file only.
    Other files of public folder are, like fav icon and logo files.
3)src: 
    This is main folder which contains ReactJS project Components.
    The components which ever we are going to develop, we must keep inside of 
    src folder only.
    By defaul src folder contains following important files:
    1)App.js
    2)App.css 
    3)App.test.js
    4)index.js
    5)index.css 
    6)    

4)package.json
    This file act as configuration/registration file.
    This file contains project name or library name and its version.

    And furtherly this package.json contains 3 important sections 
    1)scripts
    2)dependencies 
    3)devDependencies

    npm start == start under scripts of package.json.


Component creation:
===================
1)create one folder with respective name 
2)create component related js file 
3)create css file 
4)create test file     


jsx: 
=====
Note: jsx code must maintain single parent tag.

Note2:
 to assign the css classes at tag 
 suppose we should use className attribute instead of class.


 In ReactJS, Components can be developed in 2 approaches.
 1)Functional based components 
 2)Class based comonents 


 How to display dynamic data?
 ============================
 The data which is there inside of the variables 

 using {}

 Need of props object. 
 Communication between Components 
 ================================
 Communication between Components is acheved with one of the approaches is props.

Installing basic/core bootstrap in ReactJS
================================
npm install bootstrap
npm i bootstrap

above command pull the bootstrap libraries from online npmjs.org over internet 
and keeps inside of node_modules folder 
and register with 
package.json and package-loc.json files.

bootstrap/dist/css/bootstrap.css

inside of index.js 
import 'bootstrap/dist/css/bootstrap.css'

7-Jan-2022
==========
Can we use attributes, by the time of using custum tags(React Component)?
Yes 
How to access those values at Component level?
using "props" object.

"props" is a build in object, which usded to access attribute values 
at component level.
props is a read only object.(that means one way communication)

How to make communication between 2 components?
Comminication between 2 components is developed in 2 phases 
1)passing data in the form of tag attributes at parent Component level 
2)reveiving data using "props" at child Component level

"props" is a read only object 
"props" is a immutable object.


using objects as attribute values.
====================================

List processing 
================
list is nothing but Array.
We can do list processing in ReactJS using, map().


1)jsx must have single parent tag 
2) class attribute must like className instead of class 
3)Components can be developed in 2 approaches 
    1)function based component 
    2)clas based component 
4)By the time importing css files, file extension is mandatory
    where as in case of js files file exetension is optional.
5)dynamic data accessing    {}
6)using props 
    1)pass data in the form of attributes to Component tag 
    2)receive data using "props" object 
7)bootstrap installation  in react js
8)using object as attribute value 
9)list processing.  using map 

ReactJS Component Styling 
=========================
is nothign appliying inline styles , that is nothing but using style attribute.

1)style attribute must takes {{}} intead of "" string value 
    In traditional HTML
    <h3 style="color:blue"> Hello World</h3>

    In case ReactJS: 
        <h3 style={{color:blue}}> Hello World</h3>


<h3 style={{color: "blue"}}>Hello World</h3>
==============================================
what is the meaning of double {             {}              }        
1)first {} is for the purpose of processing dynamic data 
2)second {} is object literal


2)if style proppery contains multiple words separated with -, then 
those css properties must be use in camel case 
Ex : 
    background-color: '#f2f2f2';

    Right approach in Reactjs 

    backgroundColor: "f2f2f2"
3)if multple css properties are there, those must be separated by "," delimitor instead of ";".    


Event Handling 
================

In Case of Normalr HTML + JS 
=============================
function clickHandler(){
    alert('Hi');
}

<button onclick="clickHandler()">ClickMe</button>

In case of JSX 
===============
1)the actual event name (word) that is which follows "on" must be First charater is 
capital 

"onClick" instead of "onclick"
2)function name should not be enclosed with "", but shuld be enclosed with {}
3)function name should not followed with (), 
    If we use parantasys right immediate function name , 
    then it is treated as immidiate function call.


<button onClick={clickHandler}>ClickMe</button>   

8-Jan-2022
==========
1)props 
2)list processing
2)styling 
3)event handling 

Event handling in case of functions 
====================================

state management or state of component 
======================================
1)function components bydefault does not support state. 
2)But in latest versions of ReactJS that is from 16 onwards, 
    by using hooks, we achieve state management in functions is possible.

state management in Class Component 
===================================
1)state management in class component is achieved by using "state" object
2)state object is nothing but an object literal 
3)state object must be initialized inside of constructor.
4)while developing constructor, super() call must be there as first statement of 
constructor 


state manipulation 
====================
1) state manipulation directly is not recommended 
why?
if we do state manipulation directly, those changes does not 
reflects to screen or view. Hence direct manipulation is not recommened.
Then what is best/right approach to do state manipulation?
using setState() we can do state manipulation.

What is setState() and its behaviour?
1)setState() is a built in function. which takes 2 arguments 
1) an object literal
2) a call back function 
2)setState() is used to update state object 
3)setState() behaves as asynchronus call. 
4)after succesfully completion of setState() internally 
rerendering is called, hence the changes of state will effects to screen/view


Note: 
by default state object does not allowe to access inside of methods,
unless those method is binded with "this"
voilation causes error .

method binding shuld be kept inside of constructor as follows 

this.method_name = this.method_name.bind(this);


conditioning in ReactJS OR jsx 
===============================
We will do conditioing using {condition && 

    here goes your code.
}

11-Jan-2022
============
Images using in Reactjs 
=========================
images using in html
====================
<img src="" alt="title" width="" height="">

1)image is there in our folder structure,
    that to, usually in side or src folder 
2)images are there online like cloud environment, 
    we have their url path    

The way of ussage slightly changed based on whare 
images available .

case 1
=========
If images are available as part folder structure,
then those images suppose has to be imported 
like css files or js files

and those imported file variable path has to be used to 
img tag src as dynamic value.

Forms 
===========
<form>
<label>
<input>
<input type="text">
<input type="number">
<input type="email">
<input type="password">
<input type="radio">
<input type="checkbox">
<input type="file">
<textarea>
<button>
<button type="submit">
<button type="button">
<button type="reset">
<select>
====================================================
<form>
<label>
<input>

<input type="radio">
<input type="checkbox">
<input type="file">
<textarea>
<button>
<button type="submit">
<button type="button">
<button type="reset">
<select>
=====================================

Incase of html 
===============
<input type="text|number|email|pasword" name="" placeholder="">

incase of ReactJS 
=================
<input type="text|number|email|pasword" name="" placeholder=""
    value={} 
    onChange={}
>
In this case of fields, we can go with singe change handler funtion,
but we should maintain certain rues.
1)state property name and field name values must be same.

event.target.name 
event.target.value

textarea 
==========
Incase of html 
===============
<textarea name="">
    text area content goes here 
<textarea>



incase of ReactJS 
=================
<textarea name="" 
    value={} 
    onChange={}>
    
<textarea>
incase of texare also we can go with single change handler function.

event.target.name 
event.target.value
==============================================
select
=======
Incase of html 
===============
<select>
    <option value="">Hyderabad
    <option value="">Chennai
    <option value="">Mumbai
</select> 

incase of ReactJS 
=================
<select name="" 
    value={} 
    onChange={}>
    <option value="">Hyderabad</option>
    <option value="">Chennai</option>
    <option value="">Mumbai</option>
</select> 

incase of select also we can go with single change handler function.
event.target.name 
event.target.value
====================================
file handling 
===================

Incase of html 
===============
<input type="file" name="">

Incase of html 
===============
<input type="file" name=""
    //value={} 
    onChange={}></input>

but incase of file , we have to go with differrent dedicated change handler function.
event.target.files
event.target.files.length
event.target.files[0]


working with cehck boxes: 
===========================
<input type="checkbox" name="" value= ""/> Label goes here .
In pure html <form> tag is taking care about all from controlls internally.

But where as in case of ReactJS, even though we form tag, we should maintan state our self.
form tag does not have any role.

<input type="checkbox" name ="" value =""
    checked={}
    onChange={}></input>

single change handler function not helpful .
we should go a dedicated change handler function.
bz 
    event.target.name
    event.target.value 

    event.target.checked

    
13-Jan-2022
===========
17-Jan-2022
============
Communication between multiple components 
===============================================
case1:Parent to child:parent component sends information, as child component attributes, 
    and child components receives that information in its component by using "props" object.

case2:child to parent: parent component has its functions or methods and these functions/methods
    must take some parameters to transfer data from child to parent, these functions or 
    methods will be passed as attributes to child component.
    these methods will be accessable in child component by using props object.
    and these methods will be called/invoked based on some events in child component, and in that way 
    data will be passed from child component to parent component.
case3:sibling components: 
    communication between sibling components is achieved by using contextAPI or Redux or etc.

21-Jan-2022
============
SASS 
====
1)variables 
2)nesting 
    a)selector nesting 
    b)property nesting 
3)partials/ file snippets 
    @import directive
    file extension is optional while import 
    usully for file snippets, file name is prefixed with _ 
   The advantage of partials or file snippets is 
   we re use.
4)@mixin directive 
    nothing but definig collection css properties with a name.
    and this mixin can be reused in any selector or other mixin also.
    while declaration of mixin @mixin is used 
    while usage of mixin @include is used 
5)comments 
     //single line comments, not included in generated css 
     /*
        multi line comment, but includes in generated minimal css 
     */    
     /*!
        multi line comment, but not includes in generated minification version of css
     */
6)@extend directive 
    this directive is used reusing of existed selectors in to some other selectors 
7)interpolation 
    #{}
8)parent selector 
     &-   
================================================
ReactJS 
Communication between multiple components
=========================================
EmploeesOperations 


component lifecycle methods 
============================
lifecycle means stages/phase which we come accros after boarn state to before dead state 

Basically componets have 3 phases/states 
1)creation phase (Mount Phase)
2)update phase (Update Phase )
3)delete phase (Unmount Phase)
component creation 
=====================
constructor 
render 
componentDidMount 

componentDidUpdate 

Http Requests
================
We can perform Http Requests in react js by using axios library.
axious is developed by using Promises. 
To work with axios in react js, first we should install it.
setup 
npm install axious 

auxis is used to perform communication with REST API/ RESTFul API, end point urls 

22-Jan-2022
===========
Edid is pending in EmployeeOperations app, that was completed 

http calls in ReactJS 
What is http: 
http stands for HyperTextTransferProtocal which helps to communicagte 
between systems/computesr over network 

We can perform https call s in ReactJS, By axios. 
axios is third party library. which does not come along with reactjs installations.
So to work with axios, we should install axios module/library.

npm i axios.

To give the demonistration of http calls, we took help of jsonplaceholder, 
which free and fake rest api provider.

what are various http methods we have?
1)get/GET 
2)post/POST 
3)put/PUT 
4)patch/PATH 
5)delete/DELETE 

1)get/GET :get is used to get data from server to our application 
2)post/POST : is used to create new data and post to server 
3)put/PUT : to update existed data at server  
4)patch/PATH: to update existed data partially at server. 
5)delete/DELETE: to remove data or record at server



json-server 
===============
json-server is free and fake rest api provider server at our local machine 
itself. 
By using this one we can demonistrate other http calls also, like 
post, put, patch, delete.

setup 
======
1)json-server installation 
    npm i -g json-server 
2)repository and resource creation 
repository is nothing but a dedicated folder 
resource is nothing a dedicated .json file 
Rules for .json file 
=================== 
1)it must contain 1 json object, that is nothing but {}
2)Its top property is nothing but resource_name, which holds 
    collection of same type objects. that is nothing but array ,[]
3)resource object must contain "id" property with numaric value. 

3)running json-server againest repository 
    Suppose we have to run json-server, where ever our repository is there.


    npx json-server -w file_name.json --port 8082

How to perform http calls testing over json server 
We have veriaty of approaches ,
We can do 1 of the approaches, that is using postman 
How to work with postman 
=========================
1)open g chrome  
2)enter postman plugin 
3) open it , click on launch 
4)after openning postman we can perform http calls 

24-Jan-2022
===========
HTTP Protocalls 
=================
1)get/GET 
2)post/POST 
3)put/PUT 
4)patch/PATCH 
5)delete/DELETE 
json-server 

1)getting data by using get method 
2)created data / record at server by using post method 
3)updating record at server by using put method 
4)partial record update at server by using patch method
5)delete record at server by using delete method 

above all examples we did successfully by using axios in our ReactJS .

Lifecycle Methods of Component 
================================
Lifecycle: Lifecycle of component is nothing but the various stages 
we come accross after component creation and placing over screen and before component died and 
removing the component from screen.

Basically this component lifecycle is bydefault applicable or supported by 
class components. 
By default function components does not have this facility.

Lifecycle methods or states of component 
=======================================  
Basically we 3 states in class component life cycle.

1)Mount 
2)Update  
3)UnMount 


1)Mount : Component creation and placing over the screen.
2)Update : Component either state or props might be changed  
3)UnMount: removing component  from screen.


1)Mount 
========
    1)constructor()
    2)getDerivedStateFromProps()
    2)render()
    3)componentDidMount()
2)Update  
===========
    1)getDerivedStateFromProps()
    2)shouldComponentUpdate()
    3)render()
    4)getSnapshotBeforeUpdate()
    5)componentDidUpdate();

    Note: shouldComponentUpdate() this method must returns boolean.
    If it returns true, then only componentDidUpdate() get chance for execution 
    other wise componentDidUpdate() wont be executed.


3)UnMount 
    componentWillUnmount();




1)Mount 
========
    3)componentDidMount()
2)Update  
===========
    componentDidUpdate();
3)UnMount 
    componentWillUnmount();
    
LifeCycle methods 

25-Jan-2022
==============

Lifecycle Hooks,
================
Lifecycle hooks topics is purely belongs to Function Components.
Function Components by default does not support lifecycle methods and state. 
To over come this problem in Function Components and get the features/benfits of lifecycle methods and 
as well as state management of class components,  in functions, Lifecycle hooks are introduced 
from React 16.8 version on wards.

Ussage rules of Hooks 
======================
1)hooks must be imported 
2)hooks must be used for the purpose declaration of variables at top of function.
3)By the time of calling hooks associated functins, those thouls not be called from infinity loops.
 or even normal loops .
4)hoooks are strictly belongs to functions components, so these are not allowed to use in 
     class components.
5)hooks features of functions makes function components as parallel component to 
class components. 
    Event though, there is no plant or thought to eleminate class components from ReactJS .

Various hooks in ReactJS 
======================== 
1)useState  

    1)object destructure 
    2)array destructure 

Ussage of useState()
=======================
1)First we should import useState from react module/library 
2)we have to create a variable and its associated mutator method by using useState();
3)useState() function will allow to initialize state variable with initial value .
4) The possible intial values are as follows 
    number, string, boolean, array([]), object literal({})    

Note: we can use useState() for the purpose of creating multiple state variables.
one time usage is nothing but one state variable and its assciated mutator method creation.

===========================================
In case of Class Component 
1)
this.state = {
    we can define any number state variables as object literal
}
2)this.setStat({})
=========================
In case of function component 
===========
let [name, setName] = useState('');

27-Jan-2022
===========
Lifecycle of class Component 
=============================
1)Def: 
2)what are various states/phases 
    3 
3)what are they 
    MOUNT 
    UPDATE 
    UNMOUNT 
4)what are various lifecycle methods involved in each state/phase?
    MOUNT
    ======
    constructor
    getDerivedStateFromProps 
    render 
    componentDidMount 

    UPDATE
    ======
    getDerivedStateFromProps
    shouldComponentUpdate():boolean
    render()
    getSnapshotBeforeUpdate
    componentDidUpdate(prevProps, prevState)
    UNMOUNT
    =========
    componentWillUnmount()

    =================================
    componentDidMount()
    componentDidUpdate()
    componentWillUnmount()
    =============================================
todoTask
useRef()
===========
1)useRef() is a hook 
2)Usage 
    1)first we shoule import it 
        import React, {useRef} from "react"
    2)we should create ref variable 
        let boxRef = useRef();

    3)map or bind ref variable with target tag by using ref attribute .
        <div ref={myRef}>
        </dvi>
    
==============================
28-Jan-2022
=============    
Component Lifecycle
TotoTask using useState 
useRef with function, createRef 

================================================================================
                                    FunctionalComponent         ClassComponent 

state                               normal variable useState    this.state 
state manipulation                  setter method useState      this.setState()

ref attribute/dom manipulations     useRef                      createRef 
prog. Navigation                    useNavigate                 (6.2)  ?
params                              useParams()
queryParams/searchParams            useSearchParams()
context                             createContext, useContext   createContext, <context_name.Consumer>
                                                                                {(data)=>   }
                                                                                <context_name.Consumer>

automatic code execution/           useEffect                   lifecycle methods 
lifecycle methods of component 


Routing 
======= 
Routing is used to develop menus navigation programiing in ReactJS applications,
To work with Routing in ReactJS, we should install react-router-dom module/library 
npm install react-router-dom
npm i react-router-dom

check package.json file before and after installation.

The major components which are involved in menu development programming 
=========================================================================
Link 
BrowserRouter/Router 
Routes 
Route 

steps to develop menu programming in React js 
============================================ 
1)import react-router-dom library 
2)develop menu, by using <Link> component rathere than of <a>
3)develop all required components which are involved in munu.
4)develop layout Component 
5)integrate layout with App component 


<li><Link to="/">Home</Link></li>
<Route path="/" element={<Home />}></Route>

SPAs: Single Page Application 
In case SPA, for eache and every link clicking, application 
or web page is not reloaded.
SPA is achieved internally by using <Link> instad of using <a>

if we use <a href="">

<div id="root">
</div>

ReactJS applications are by default SPA only.

Lazy Loading,
===============
Antonioum for above one eager loading 

lazy Vs eager 

default one is eager loading spa.
In case of multi page applications,  (mpa) default one is lazy loading.
whaere as in case of SPA, default one is eagar loading.

In eager loading, all components which are integrated in menu are 
downloaded from server to client at first time it self. 
it is feature of spa.


bundles: 
============
bydefault all js files will be combined as single bundle, its name is main.chunck.js

to improve the performance of application, suppose we have to use lazy loading.


ICT 
======

2-Feb-2022
===========
HTML5, CSS3, responsive, JS 
============================
strictly dont use bottstrap
expecting manual css: 

 hands on 2 + hands on 3 

 hands on 3 
 ============ 
 1)grid 

 skills: drop down 

 2) table 


 https://jsonplaceholder.typicode.com/users

 1)ajax 
 2)fetch 

skills   :      drop down 
project:        drop down

EmpNo   EmpName             skills          project 
===================================================


ict 
======
Date:   Wednesday, 02-Feb-22
Duration: 8 Hours 
Time: 9AM to 7PM 
Question: will be given 1 Hour before by Couch/TT


29-Jar-2022
============
Routing 
==========
1)react-router-dom
2)own 
3)why?

Link, 
BroserRouter 
Routes 
Route 

lazy loading ?
===============
lazy 
Suspence 

ActiveLink 
===========
 active link is developed by using <NavLink> instead of <Link>


Programatical navigation
============================
every kind of navigation requirement  is not fullfilled with menu based navigation.
these is some situations, we can across, the need of programaticall navigation. 


Usually Navigation is developed in 2 approaches 
1)design level navigation 
2)programaticall/dynamic navigation 


programatical navigation we can develop by useNavigate hook .

steps to develop programmatical navigation 
1)design level navigation is mandatory   
2)import useNavigate from 'react-router-dom' 
3)create variable for useNavigate; 
4)this variable is nothing function, 
    so we should use as function 
5)navigate('/path)   
here the path must match that design level paths 

Params: 
=========
params will basically classified into 2 types 
1)params 
2)query parameters 

params
====== 
syntax:         /path/:id 
                /users/:uid 
                /products/:pid 
                /employees/:eid/:role 
if path contains params then those paramse will be retrieved by using useParams()
Note: params must prefied with : in url path 
if multiples are there, those are separated/delimited by (/)
2)query parameters  
                /path?id={id_val}
                /users?uid={uid}
                /products?pid ={pid}
                /employees?eid={eid}&role={role}
Note: ?must be there in url 
and parameter will there in the form name=value pair.
if multiples are there then those are separated/delimited by (&)                


1)Active Link is used to highlight the current active link. 
<NavLink>
2)Programatical Navigation 
    useNavigation()
3)params  



4-Feb-2022
==========
1) we are expecting ICT-2 in next week.
    1)re develop ICT-1 in ReactJS 
    2)Hands on -3 similar one in ReactJS  
    3)Hands on -4 similar one in ReactJS 


    Features _ICT-1 
    ================
    1)Fetching data fetch/ajax 
    2)DOM manipulaton 
    3) CSS3 , responsive 

    3)Hands on -4 similar one in ReactJS 
    =====================================
    It is fully validations 

    Expecting ICT-2(ReactJS)
    =====
    1)Fetch data (axios)
    2)DOM Manipulation (useRef()/createRef())
    3)state and state manipulation (function/class)
    4) might contain validations 

    Next comming Hands on -5 
    ==========================
    Around 21st 


Current going machine test 
============================
presently you are doing class based component, rt?
    monika
    kiran
    yaswanth vardan
    sadika
    yaswanth naga sai 

    vanita 
    anusha 
    pradip 
    sunanda 
    sravya 
    hareesh
    pavan
switch to function based component.( same todo app)


============================================
1)url params 
    useParams 
2)queryString params 
    useSearchParams 

3)need context 

context development 
===================
    1)createContext() 
    2)wrap child component invocation by context variables 
        and pass which ever data you want to make it available 
        for child components 
    3)in case function based component 
        useContext(context_name)        
    4)in case class component 
        <context_name.Consumer>     
            {(data)=>   }
        <context_name.Consumer>

======================================
useEffect:
     This hook is used to execute some code automatically.
     usually this hook is executed after each render.        
default syntax 
================
useEffect(()=>{


})


2) only one time execution syntax 
================
useEffect(()=>{

    
},        [])


this one is equalent to componentDidMount()


3) execution depend upon some variables change syntax 
================
useEffect(()=>{
    
    
},        [keep dependent variables])

this syntax is equallent to componentDidUpdate();
=================================================================
5-Feb-2022
===========
useEffect 
=========
The useEffect Hook allows you to perform side effects in your components. 
Some examples of side effects are: fetching data, directly updating the DOM, 
and timers. useEffect accepts two arguments. The second argument is optional. 
useEffect(<function>, <dependency>)



lifecyclemethods                class component                      function component 
========================================================================================
                                componentDidMount()                   useEffect(()=>{}, [])
                                componentDidUpdate()                  useEffect(()=>{}, [pros, some state variables ])
                                componentWillUnmount()                useEffect(()=>{
                                                                            some statements;
                                                                            return (
                                                                                this is for unmount
                                                                            )

                                                                        }, []) 

EmployeesOperations Project
============================ 
1)Create, Udate, Delete,
2)We use axios for http calls 
3)We used json-server 
4)we used life cycle methods 


======================================
7-Feb-2022
============
1)Todo app using function based component (useState hook)
    Time duration is: 10min 

    10      100min      1Hour   40min
    30                  3Hour   120min => 5Hour 

2)one more todo app     


3)Employees operations (CUD) Using Class Component 
4)Employees operations (CUD) Using Function Component (useState, useEffect) 
    Note: 3 and 4 must uses json-server, axios (  30min)

Redux 
=======
1)redux is nothing but js based 3rd party library, 
which is used to maintan central data store.  

Note: by using redux, max level we can reduce personal state of components
    which can be sharable with other components.

setup 
=======
npm i redux     

what is npm?
npm is a command based tool.
which allowes us to perform various types of operations by using it. 
like 
1)we can create js based (NodeJS)applications (npm init)
2)we can make intstall js libraries/modules associated to respective projects (npm install)
3)we can run application (npm start)
4)we cam test application (npm test )
5)we can build application for production (npm run build)


What is Redux?
What is its purpose and scope?
What are it various operations? 

anatomy of Redux 
================
1)store 
2)reducer 
3)state 
4)action 

Major api involved with redux 
================================
createStore()

important methods of store 
=============================
subscribe()
dispatch()
getState()

1)store 
    store is an object, which holds state and reducer of application
    state of store never allowed to mutate/modify directly.
    state of store is always modifyed by using reducer only.
    But reducer also does not allowe to access directly.

2)reducer 
    reducer is a function, which takes 2 arguments 
        1)state 
        2)action  
    It is responsible to perform the state mutation operations.
    we are not allowed to modify the state, whith out permission of reducer.
    it can return latest state.

    (we can feel as an store operator, store manager, store monitor)
3)state 
    state is nothing but state of application, 
    It might be a primitive variable, array, an object.
    state never allowed to modify directly.
4)action 
    action also an object, which contains one important property.
    That is type, which indicates action type.

Major api involved with redux 
================================
createStore()    

createStore() is used to create the store.
To use this method, first we should import it from redux lib.
createStore() must takes a reducer as an argument. 
On successfull execution of createStore(), it producess a reference variable to store.


important methods of store 
=============================
subscribe():
    If we want to get the current state automatically, we shoult get subscribe().
    This subscribe() automatically return current state, on each and every 
    mutation/change of the state.
dispatch()
    It is an machanism, which allowes us to invoke actions or operations of reducer
getState()
    which is used to get the current state of store.



score=10 
========
what are various operations we can design to perform on it.

1)increment 
2)decrement 
3)reset 
state can hold either primitive value, array, an object .

steps to develop redux applicatio 
===================================
1)we should install redux lib 
2)we should create store by using createStore(), 
    for this purpose first we should import createStrore from redux lib .
3)we should create reducer, which takes state and action 


React-Redux 
============
Woring with React - Redux, 
1)we should install redux, react-redux lib .

9-Feb-2022
===========

we did some redux examples 
like 1)primitive values as state (counter)
    2)object values as state (counter)
    3)array as state (todo app)
    4)object and array as state (todo app)

5)react-redux we counter example (counter) .
==========================================




        


























